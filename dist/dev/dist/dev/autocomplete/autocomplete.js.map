{"version":3,"sources":["autocomplete/autocomplete.js"],"names":["bindable","customAttribute","inject","fireEvent","MdAutoComplete","Element","element","input","attached","tagName","toLowerCase","au","controller","viewModel","Error","refresh","detached","$","siblings","off","remove","autocomplete","data","values","minLength","limit","on","valuesChanged","newValue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,c,sBAAAA,Q;AAAUC,qB,sBAAAA,e;;AACVC,Y,+BAAAA,M;;AACAC,e,iBAAAA,S;;;gCAIKC,c,WAFZH,gBAAgB,iBAAhB,C,UACAC,OAAOG,OAAP,C,UAGEL,U,UACAA,U,UACAA,U;AAED,gCAAYM,OAAZ,EAAqB;AAAA;;AAAA,eALrBC,KAKqB,GALb,IAKa;;AAAA;;AAAA;;AAAA;;AACnB,eAAKD,OAAL,GAAeA,OAAf;AACD;;iCAEDE,Q,uBAAW;AACT,cAAI,KAAKF,OAAL,CAAaG,OAAb,CAAqBC,WAArB,OAAuC,OAA3C,EAAoD;AAClD,iBAAKH,KAAL,GAAa,KAAKD,OAAlB;AACD,WAFD,MAEO,IAAI,KAAKA,OAAL,CAAaG,OAAb,CAAqBC,WAArB,OAAuC,UAA3C,EAAuD;AAC5D,iBAAKH,KAAL,GAAa,KAAKD,OAAL,CAAaK,EAAb,CAAgBC,UAAhB,CAA2BC,SAA3B,CAAqCN,KAAlD;AACD,WAFM,MAEA;AACL,kBAAM,IAAIO,KAAJ,CAAU,yEAAV,CAAN;AACD;AACD,eAAKC,OAAL;AACD,S;;iCAEDC,Q,uBAAW;AAETC,YAAE,KAAKV,KAAP,EAAcW,QAAd,CAAuB,uBAAvB,EAAgDC,GAAhD,CAAoD,OAApD;AACAF,YAAE,KAAKV,KAAP,EAAcW,QAAd,CAAuB,uBAAvB,EAAgDE,MAAhD;AACD,S;;iCAEDL,O,sBAAU;AAAA;;AACR,eAAKC,QAAL;AACAC,YAAE,KAAKV,KAAP,EAAcc,YAAd,CAA2B;AACzBC,kBAAM,KAAKC,MADc;AAEzBC,uBAAW,KAAKA,SAFS;AAGzBC,mBAAO,KAAKA;AAHa,WAA3B;;AAQAR,YAAE,KAAKV,KAAP,EAAcW,QAAd,CAAuB,uBAAvB,EAAgDQ,EAAhD,CAAmD,OAAnD,EAA4D,YAAM;AAChEvB,sBAAU,MAAKI,KAAf,EAAsB,QAAtB;AACD,WAFD;AAGD,S;;iCAEDoB,a,0BAAcC,Q,EAAU;AACtB,eAAKb,OAAL;AACD,S;;;;;;iBA1CmB,E;;;;;iBACI,C;;;;;iBACH,E","file":"../../../autocomplete/autocomplete.js","sourcesContent":["import {bindable, customAttribute} from 'aurelia-templating';\r\nimport {inject} from 'aurelia-dependency-injection';\r\nimport {fireEvent} from '../common/events';\r\n\r\n@customAttribute('md-autocomplete')\r\n@inject(Element)\r\nexport class MdAutoComplete {\r\n  input = null;\r\n  @bindable() limit = 20;\r\n  @bindable() minLength = 1;\r\n  @bindable() values = {};\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n  }\r\n\r\n  attached() {\r\n    if (this.element.tagName.toLowerCase() === 'input') {\r\n      this.input = this.element;\r\n    } else if (this.element.tagName.toLowerCase() === 'md-input') {\r\n      this.input = this.element.au.controller.viewModel.input;\r\n    } else {\r\n      throw new Error('md-autocomplete must be attached to either an input or md-input element');\r\n    }\r\n    this.refresh();\r\n  }\r\n\r\n  detached() {\r\n    // remove .autocomplete-content children\r\n    $(this.input).siblings('.autocomplete-content').off('click');\r\n    $(this.input).siblings('.autocomplete-content').remove();\r\n  }\r\n\r\n  refresh() {\r\n    this.detached();\r\n    $(this.input).autocomplete({\r\n      data: this.values,\r\n      minLength: this.minLength,\r\n      limit: this.limit\r\n    });\r\n    // $('.autocomplete-content', this.element).on('click', () => {\r\n    //   fireEvent(this.input, 'change');\r\n    // });\r\n    $(this.input).siblings('.autocomplete-content').on('click', () => {\r\n      fireEvent(this.input, 'change');\r\n    });\r\n  }\r\n\r\n  valuesChanged(newValue) {\r\n    this.refresh();\r\n  }\r\n}\r\n"]}