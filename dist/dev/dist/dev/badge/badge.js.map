{"version":3,"sources":["badge/badge.js"],"names":["bindable","customAttribute","inject","AttributeManager","getBooleanFromAttributeValue","MdBadge","Element","element","attributeManager","attached","classes","isNew","push","caption","addAttributes","addClasses","detached","removeClasses","removeAttributes","newChanged","newValue","captionChanged"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,c,sBAAAA,Q;AAAUC,qB,sBAAAA,e;;AACVC,Y,+BAAAA,M;;AACAC,sB,2BAAAA,gB;;AACAC,kC,qBAAAA,4B;;;yBAIIC,O,WAFZJ,gBAAgB,UAAhB,C,UACAC,OAAOI,OAAP,C,UAEEN,U,UACAA,U;AAED,yBAAYO,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AACnB,eAAKA,OAAL,GAAeA,OAAf;AACA,eAAKC,gBAAL,GAAwB,IAAIL,gBAAJ,CAAqB,KAAKI,OAA1B,CAAxB;AACD;;0BAEDE,Q,uBAAW;AACT,cAAIC,UAAU,CACZ,OADY,CAAd;;AAIA,cAAIN,6BAA6B,KAAKO,KAAlC,CAAJ,EAA8C;AAC5CD,oBAAQE,IAAR,CAAa,KAAb;AACD;;AAED,cAAI,KAAKC,OAAL,KAAiB,IAArB,EAA2B;AACzB,iBAAKL,gBAAL,CAAsBM,aAAtB,CAAoC,EAAE,sBAAsB,KAAKD,OAA7B,EAApC;AACD;;AAED,eAAKL,gBAAL,CAAsBO,UAAtB,CAAiCL,OAAjC;AACD,S;;0BAEDM,Q,uBAAW;AACT,eAAKR,gBAAL,CAAsBS,aAAtB,CAAoC,CAAC,OAAD,EAAU,KAAV,CAApC;AACA,eAAKT,gBAAL,CAAsBU,gBAAtB,CAAuC,CAAC,oBAAD,CAAvC;AACD,S;;0BAEDC,U,uBAAWC,Q,EAAU;AACnB,cAAIhB,6BAA6BgB,QAA7B,CAAJ,EAA4C;AAC1C,iBAAKZ,gBAAL,CAAsBO,UAAtB,CAAiC,KAAjC;AACD,WAFD,MAEO;AACL,iBAAKP,gBAAL,CAAsBS,aAAtB,CAAoC,KAApC;AACD;AACF,S;;0BAEDI,c,2BAAeD,Q,EAAU;AACvB,cAAIA,aAAa,IAAjB,EAAuB;AACrB,iBAAKZ,gBAAL,CAAsBM,aAAtB,CAAoC,EAAE,sBAAsBM,QAAxB,EAApC;AACD,WAFD,MAEO;AACL,iBAAKZ,gBAAL,CAAsBU,gBAAtB,CAAuC,CAAC,oBAAD,CAAvC;AACD;AACF,S;;;;;;iBA3CmB,K;;;;;iBACE,I","file":"../../../badge/badge.js","sourcesContent":["import { bindable, customAttribute } from 'aurelia-templating';\nimport { inject } from 'aurelia-dependency-injection';\nimport { AttributeManager } from '../common/attributeManager';\nimport { getBooleanFromAttributeValue } from '../common/attributes';\n\n@customAttribute('md-badge')\n@inject(Element)\nexport class MdBadge {\n  @bindable() isNew = false;\n  @bindable() caption = null;\n\n  constructor(element) {\n    this.element = element;\n    this.attributeManager = new AttributeManager(this.element);\n  }\n\n  attached() {\n    let classes = [\n      'badge'\n    ];\n\n    if (getBooleanFromAttributeValue(this.isNew)) {\n      classes.push('new');\n    }\n\n    if (this.caption !== null) {\n      this.attributeManager.addAttributes({ 'data-badge-caption': this.caption });\n    }\n\n    this.attributeManager.addClasses(classes);\n  }\n\n  detached() {\n    this.attributeManager.removeClasses(['badge', 'new']);\n    this.attributeManager.removeAttributes(['data-badge-caption']);\n  }\n\n  newChanged(newValue) {\n    if (getBooleanFromAttributeValue(newValue)) {\n      this.attributeManager.addClasses('new');\n    } else {\n      this.attributeManager.removeClasses('new');\n    }\n  }\n\n  captionChanged(newValue) {\n    if (newValue !== null) {\n      this.attributeManager.addAttributes({ 'data-badge-caption': newValue });\n    } else {\n      this.attributeManager.removeAttributes(['data-badge-caption']);\n    }\n  }\n}\n"]}