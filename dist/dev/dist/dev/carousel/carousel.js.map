{"version":3,"sources":["carousel/carousel.js"],"names":["bindable","children","customElement","bindingMode","inject","TaskQueue","getBooleanFromAttributeValue","MdCarousel","Element","defaultBindingMode","oneTime","element","taskQueue","attached","mdSlider","classList","add","refresh","detached","$","carousel","itemsChanged","newValue","items","length","options","full_width","fullWidth","indicators","mdIndicators","queueTask"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,c,sBAAAA,Q;AAAUC,c,sBAAAA,Q;AAAUC,mB,sBAAAA,a;;AACpBC,iB,mBAAAA,W;;AACAC,Y,+BAAAA,M;;AACAC,e,qBAAAA,S;;AACAC,kC,qBAAAA,4B;;;4BAIKC,U,WAFZL,cAAc,aAAd,C,UACAE,OAAOI,OAAP,EAAgBH,SAAhB,C,UAEEL,U,UACAA,SAAS;AACRS,4BAAoBN,YAAYO;AADxB,OAAT,C,UAGAT,SAAS,kBAAT,C;AAED,4BAAYU,OAAZ,EAAqBC,SAArB,EAAgC;AAAA;;AAAA;;AAAA;;AAAA;;AAC9B,eAAKD,OAAL,GAAeA,OAAf;AACA,eAAKC,SAAL,GAAiBA,SAAjB;AACD;;6BAEDC,Q,uBAAW;AACT,cAAIP,6BAA6B,KAAKQ,QAAlC,CAAJ,EAAiD;AAC/C,iBAAKH,OAAL,CAAaI,SAAb,CAAuBC,GAAvB,CAA2B,iBAA3B;AACD;;AAQD,eAAKC,OAAL;AACD,S;;6BAEDC,Q,uBAAW;AACTC,YAAE,KAAKR,OAAP,EAAgBS,QAAhB,CAAyB,SAAzB;AACD,S;;6BAEDC,Y,yBAAaC,Q,EAAU;AACrB,eAAKL,OAAL;AACD,S;;6BAEDA,O,sBAAU;AAAA;;AACR,cAAI,KAAKM,KAAL,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,gBAAIC,UAAU;AACZC,0BAAYpB,6BAA6B,KAAKQ,QAAlC,CADA;AAEZa,yBAAWrB,6BAA6B,KAAKQ,QAAlC,CAFC;AAGZc,0BAAY,KAAKC;AAHL,aAAd;;AAMA,iBAAKjB,SAAL,CAAekB,SAAf,CAAyB,YAAM;AAC7BX,gBAAE,MAAKR,OAAP,EAAgBS,QAAhB,CAAyBK,OAAzB;AACD,aAFD;AAGD;AACF,S;;;;;;iBA7C0B,I;;;;;iBAGb,K;;;;;iBACwB,E","file":"../../../carousel/carousel.js","sourcesContent":["import {bindable, children, customElement} from 'aurelia-templating';\nimport {bindingMode} from 'aurelia-binding';\nimport {inject} from 'aurelia-dependency-injection';\nimport {TaskQueue} from 'aurelia-task-queue';\nimport {getBooleanFromAttributeValue} from '../common/attributes';\n\n@customElement('md-carousel')\n@inject(Element, TaskQueue)\nexport class MdCarousel {\n  @bindable() mdIndicators = true;\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdSlider = false;\n  @children('md-carousel-item') items = [];\n\n  constructor(element, taskQueue) {\n    this.element = element;\n    this.taskQueue = taskQueue;\n  }\n\n  attached() {\n    if (getBooleanFromAttributeValue(this.mdSlider)) {\n      this.element.classList.add('carousel-slider');\n    }\n\n    // workaround for: https://github.com/Dogfalo/materialize/issues/2741\n    // if (getBooleanFromAttributeValue(this.mdSlider)) {\n    //   $(this.element).carousel({full_width: true});\n    // } else {\n    //   $(this.element).carousel();\n    // }\n    this.refresh();\n  }\n\n  detached() {\n    $(this.element).carousel('destroy');\n  }\n\n  itemsChanged(newValue) {\n    this.refresh();\n  }\n\n  refresh() {\n    if (this.items.length > 0) {\n      let options = {\n        full_width: getBooleanFromAttributeValue(this.mdSlider),\n        fullWidth: getBooleanFromAttributeValue(this.mdSlider),\n        indicators: this.mdIndicators\n      };\n\n      this.taskQueue.queueTask(() => {\n        $(this.element).carousel(options);\n      });\n    }\n  }\n}\n"]}