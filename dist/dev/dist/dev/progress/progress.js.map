{"version":3,"sources":["progress/progress.js"],"names":["bindable","customElement","bindingMode","inject","MdProgress","Element","defaultBindingMode","twoWay","oneTime","element","bind","attached","mdPixelSizeChanged","mdPixelSize","mdSizeChanged","newValue","wrapper","isNaN","style","height","width"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,c,sBAAAA,Q;AAAUC,mB,sBAAAA,a;;AACVC,iB,mBAAAA,W;;AACAC,Y,+BAAAA,M;;;4BAIIC,U,WAFZH,cAAc,aAAd,C,UACAE,OAAOE,OAAP,C,UAEEL,U,UACAA,SAAS;AACRM,4BAAoBJ,YAAYK;AADxB,OAAT,C,UAGAP,U,UACAA,SAAS;AACRM,4BAAoBJ,YAAYM;AADxB,OAAT,C,UAGAR,SAAS;AACRM,4BAAoBJ,YAAYK;AADxB,OAAT,C;AAID,4BAAYE,OAAZ,EAAqB;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACnB,eAAKA,OAAL,GAAeA,OAAf;AACD;;6BAMDC,I,mBAAO,CAGN,C;;6BAEDC,Q,uBAAW;AACT,eAAKC,kBAAL,CAAwB,KAAKC,WAA7B;AACD,S;;6BAEDC,a,0BAAcC,Q,EAAU;AACtB,eAAKF,WAAL,GAAmB,IAAnB;AACD,S;;6BAEDD,kB,+BAAmBG,Q,EAAU;AAC3B,cAAI,KAAKC,OAAT,EAAkB;AAChBD,uBAAYA,aAAa,IAAb,IAAqBA,aAAa,EAAlC,IAAwCE,MAAMF,QAAN,CAAzC,GAA4D,EAA5D,GAAoEA,QAApE,OAAX;AACA,iBAAKC,OAAL,CAAaE,KAAb,CAAmBC,MAAnB,GAA4BJ,QAA5B;AACA,iBAAKC,OAAL,CAAaE,KAAb,CAAmBE,KAAnB,GAA2BL,QAA3B;AACD;AACF,S;;;;;;iBAvCqB,I;;;;;iBAGL,I;;;;;iBACI,K;;;;;iBAGT,Q;;;;;iBAGC,I","file":"../../../progress/progress.js","sourcesContent":["import { bindable, customElement } from 'aurelia-templating';\nimport { bindingMode } from 'aurelia-binding';\nimport { inject } from 'aurelia-dependency-injection';\n\n@customElement('md-progress')\n@inject(Element)\nexport class MdProgress {\n  @bindable() mdColor = null;\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdPixelSize = null;\n  @bindable() mdSize = 'big';\n  @bindable({\n    defaultBindingMode: bindingMode.oneTime\n  }) mdType = 'linear';\n  @bindable({\n    defaultBindingMode: bindingMode.twoWay\n  }) mdValue = null;\n\n  constructor(element) {\n    this.element = element;\n  }\n\n  // mdValueChanged(newValue, oldValue) {\n  //   console.log('mdValueChanged, newValue:', JSON.stringify(newValue), 'oldValue:', JSON.stringify(oldValue));\n  // }\n\n  bind() {\n    // This disables property changed callbacks for any bindable properties during initialization\n    // Prevents mdPixelSize getting cleared by the mdSizeChanged event during binding\n  }\n\n  attached() {\n    this.mdPixelSizeChanged(this.mdPixelSize);\n  }\n\n  mdSizeChanged(newValue) {\n    this.mdPixelSize = null;\n  }\n\n  mdPixelSizeChanged(newValue) {\n    if (this.wrapper) {\n      newValue = (newValue === null || newValue === '' || isNaN(newValue)) ? '' : `${newValue}px`;\n      this.wrapper.style.height = newValue;\n      this.wrapper.style.width = newValue;\n    }\n  }\n}\n"]}