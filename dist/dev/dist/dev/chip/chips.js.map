{"version":3,"sources":["chip/chips.js"],"names":["bindable","customAttribute","bindingMode","inject","getLogger","fireEvent","MdChips","Element","defaultBindingMode","twoWay","element","log","onChipAdd","bind","onChipDelete","onChipSelect","attached","refresh","$","on","detached","off","dataChanged","newValue","oldValue","length","chip","find","includes","i","source","operation","target","data","options","autocompleteOptions","placeholder","secondaryPlaceholder","material_chip","e"],"mappings":"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","file":"../../../chip/chips.js","sourcesContent":["import {bindable, customAttribute} from 'aurelia-templating';\r\nimport {bindingMode} from 'aurelia-binding';\r\nimport {inject} from 'aurelia-dependency-injection';\r\nimport {getLogger} from 'aurelia-logging';\r\n\r\nimport {fireEvent} from '../common/events';\r\n\r\n@customAttribute('md-chips')\r\n@inject(Element)\r\nexport class MdChips {\r\n  @bindable() autocompleteOptions = {};\r\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) data = [];\r\n  @bindable() placeholder = '';\r\n  @bindable() secondaryPlaceholder = '';\r\n\r\n  constructor(element) {\r\n    this.element = element;\r\n    this.log = getLogger('md-chips');\r\n\r\n    this.onChipAdd = this.onChipAdd.bind(this);\r\n    this.onChipDelete = this.onChipDelete.bind(this);\r\n    this.onChipSelect = this.onChipSelect.bind(this);\r\n  }\r\n\r\n  attached() {\r\n    this.refresh();\r\n    $(this.element).on('chip.add', this.onChipAdd);\r\n    $(this.element).on('chip.delete', this.onChipDelete);\r\n    $(this.element).on('chip.select', this.onChipSelect);\r\n  }\r\n\r\n  detached() {\r\n    $(this.element).off('chip.add', this.onChipAdd);\r\n    $(this.element).off('chip.delete', this.onChipDelete);\r\n    $(this.element).off('chip.select', this.onChipSelect);\r\n  }\r\n\r\n  dataChanged(newValue, oldValue) {\r\n    this.refresh();\r\n\r\n    // I know this is a bit naive..\r\n    if (newValue.length > oldValue.length) {\r\n      const chip = newValue.find(i => !oldValue.includes(i));\r\n      fireEvent(this.element, 'change', { source: 'dataChanged', operation: 'add', target: chip, data: newValue });\r\n    }\r\n    if (newValue.length < oldValue.length) {\r\n      const chip = oldValue.find(i => !newValue.includes(i));\r\n      fireEvent(this.element, 'change', { source: 'dataChanged', operation: 'delete', target: chip, data: newValue });\r\n    }\r\n  }\r\n\r\n  refresh() {\r\n    const options = {\r\n      autocompleteOptions: this.autocompleteOptions,\r\n      data: this.data,\r\n      placeholder: this.placeholder,\r\n      secondaryPlaceholder: this.secondaryPlaceholder\r\n    };\r\n    $(this.element).material_chip(options);\r\n  }\r\n\r\n  onChipAdd(e, chip) {\r\n    this.data = $(this.element).material_chip('data');\r\n    // fireEvent(this.element, 'change', { operation: 'add', target: chip, data: this.data });\r\n  }\r\n  onChipDelete(e, chip) {\r\n    this.data = $(this.element).material_chip('data');\r\n    // fireEvent(this.element, 'change', { operation: 'delete', target: chip, data: this.data });\r\n  }\r\n  onChipSelect(e, chip) {\r\n    fireEvent(this.element, 'selected', { target: chip });\r\n  }\r\n}\r\n"]}